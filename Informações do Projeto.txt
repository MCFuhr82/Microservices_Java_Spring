Projeto de Microsserviços - 

1 - Criado projeto Spring Start Project, no STS, selecionando as dependências Spring Web, JPA e H2.
- Criado repositório no Git e feito commit do projeto criado 

2 - Criado a classe Worker, com os atributos, construtor padrão, com parâmetros, getters e setters, no pacote entities.
- Criado a interface WorkerRepository, no pacote repositories. Essa interface extende a interface JPARepository.
- Na classe Worker, adicionado as anotações do JPA: @Entity, @Table, @Id, @GeneratedValue

- No arquivo properties, adicionado parâmetros para rodar o banco de dados H2.
- Criado um arquivo data.sql para povoar o banco de dados tb_worker no banco de dados H2.

- Criado o pacote controllers, adicionando a classe WorkerController.
- Nessa classe foi criado os endpoints e as annotations:
    * @RestController -> para informar ao spring que é uma classe restcontroller
    * @RequestMapping -> infomar o caminho do endpoint
    * @Autowired -> injenção de dependência do WorkerRepository
    * @GetMapping -> informa que é um método GET do HTTP
    * @PathVariable -> para casar o parâmetro passado no método findById com o caminho do @GetMapping(value = "{/id})

3 - Criado um novo projeto. Cada Microsserviços é um projeto novo do Spring Boot.
- Criado projeto hr-payroll (folha de pagameto), selecionando apenas a dependência Spring Web.

4 - Criado um pacote entities, e a classe Payment, com os atributos, construtor padrão e com parametros e getters e setters.
- Criado método getTotal() na classe Payment.
- Criado um serviço para instanciar um Payment. Pacote services, classe PaymentService.
    * Pq foi criado um service e não um repository? Pq esse projeto não tem banco de dados, apenas regras de negócio.
    * Annotation @Service, para informar para o Spring que essa classe é uma service.
    * Criado um método para instanciar um pagamento(Payment), recebendo um long, que é o Id do trabalhador(workerId) e um inteiro, que são os dias trabalhados.
    * Esse workerId será buscado no Microsserviço hr-worker.
    * Para a didática da implementação, será instanciado um objeto mocado.
    * Para testar, será criado um resource/controller para liberar um endpoint.
- Criado um pacote controllers, e uma classe PaymentController
- Annotations na classe:
    * @RestController -> para informar ao spring que é uma classe restcontroller
    * @RequestMapping -> infomar o caminho do endpoint
    * @Autowired -> injenção de dependência do PaymentService
    * @GetMapping -> informa que é um método GET do HTTP
        ** como value será informado o "/{workerId}/days/{days}"
        ** método retonnará um Payment, recebendo as duas variáveis
    @PathVariable -> para casar o parâmetro passado no método getPayment com o caminho do @GetMapping(value = "/{workerId}/days/{days}")
- criar um novo objeto payment, passando o workerId e o days.
- retorna um ResponseEntity.ok(payment), ou seja, passando o objeto criado.

- No arquivo properties, colocado o nome da aplicação e o número da porta apenas.

- No Postman, testar com o seguinte caminho: http://localhost:8101/payments/1/days/5
- Pode mudar o número do id, que sempre retornará a mesma pessoa, já que foi um objeto mocado.

5 - Fazer um projeto comunicar com o outro, usando, por enquanto, o RestTemplate.
- RestTemplate é a maneira clássica de comunicar um projeto com o outro usando web service.
- Pra usar um RestTemplate, será criado um @Bean, que é um objeto, uma instancia única que fica disponível para o projeto.
- Criado um pacote config, e uma classe AppConfig, com configurações do projeto. Tem que colocar a annotation @Configuration
    * Criado um método que retorna um RestTemplate. Ele registra uma instancia única, um singleton, do RestTemplate.
    * Essa instância única fica disponível para injetar em outros componentes. 
    * Cria um componente a partir de uma chamada de método, com a annotation @Bean. Não usa o @Componente na classe.
     ** Por exemplo:
     @Component /não usar dessa forma
     public class AppConfig {

         @Bean //forma correta, a partir de uma chamda de método
         public RestTemplate restTemplate(){}
     }
- Injetado dependência do RestTemplate na classe service.

-Criar uma propriedade do host, no arquivo properties.
    * hr-worker.host=http://localhost:8001

- Na classe PaymentService, colocar a annotation @Value para usar a propriedade do host.
    * @Value("${hr-worker.host}")
        private String workerHost;

 - Fazer uma requisição para uma API externa usando RestTemplate
 - Criado um objeto Worker no método getPayment. Como não tem a classe Worker nesse projeto, foi criado uma classe igual a que está no projeto hr-worker, mas sem as annotations.
 - Esse projeto não tem JPA, por isso que precisa apenas da estrutura do classe Worker.
 - Como passar parametros numa requisição RestTemplate, usando getForObject?
    * tem que criar um mapa, ou dicionário de parametros. Usar a classe Map, collections de chave e valor.
    * Map<String, String> -> String String pq os parametros de HTTP são apenas Strings.

6 - Feign, compoente do Spring Cloud -> forma alternativa de integrar um projeto com o outro.
- Com o botão direito no projeto payroll, Spring, add Starter -> para adicionar dependencia do Feign
- Adicionar a annotation @EnableFeignClients na classe principal
- Para fazer uma comunicação entre projetos usando Feign, declarar uma interface com as assinaturas das requisições que possam ser feitas.
- Fica muito mais limpo do que usando o RestTemplate e o Feign fica integrado com as outras ferramentos do Spring Cloud.

- Criar uma interface (WorkerFeignClient) no pacote feignclients.
- Adicionar as annotations @Component e @FeignClient(passando, por enquanto, paramentros hardcode)
    * name = "hr-worker" -> esse é o nome do projeto que vamos buscar, nome do Microsserviço
    * url = "localhost:8001" -> por hora, parametro adicionado na mão, hardcode
    * path = "/workers" -> da mesma forma, hardcode
- Adicionado o @GetMapping na interface

- Refatorar o PaymentService. No lugar de RestTemplate, usará o Feign.
- Excluir o @Autowired do RestTemplate
- Exluir o private workerHost
- Adicionar a injeção para o WorkerFeignClient
- Pode apagar o workerHost no arquivo .properties também. Não será mais usado.
- Pode apagar o Map do método também. Não precisará mais.
- Lembrar de usar o .getBody(), para pegar o corpo do objeto ResponseEntity.

7 - Ribbon, balanceador de carga
- adicionado a dependencia do Ribbon no arquivo pom.xml
- o projeto hr-payroll que vai chamar o microsserviço do hr-workers. O projeto hr-payroll é um cliente Ribbon
- essa chamada será com balanceamento de cargas

- Para informar que é um cliente Ribbon, adicionar a annotation @RibbonClient na classe principal
    * De quem vai ser cliente? Do outro microsserviço, hr-worker.
    * Por isso, adicionar como parâmetro o name = "hr-worker"

- No arquivo .properties, adicionar as possíveis portas que poderão ser usadas.
    * hr-worker.ribbon.listOfServers=localhost:8001, localhost:8002
- Para o exercício, informado apenas duas portas estáticas, no hardcode.
- Depois, será tudo automático.

- Para testar, adicionar injeção de dependência da classe Enviroment, no projeto hr-worker, classe WorkerController
- Criado um atributo looger, somente para mostrar em qual porta está rodando.

- Para rodar duas instâncias diferentes do worker, botão direito na aplicação principal, run As, run configuration.
    * Selecionar o hr-worker do Spring Boot App.
    * Alterar o nome para hr-worker - HrWorkerApplication8001
    * Na aba Arguments, em VM Arguments adicionar -Dserver.port=8001 e apply
    * Clicar em hr-worker - HrWorkerApplication8001 e duplicar, e alterar nome para 8002 e mudar no VM Arguments tb









